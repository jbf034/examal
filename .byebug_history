continue
params
continue
@current.each {|exam| puts exam.name }
@current.each {|exam| puts exam.reload }
@current.each {|exam| puts exam }
@current.each {|exam| puts exam.subjects }
@current.each {|exam| puts exam }
@current.each {|x| puts x.name }
@current.each {|x| puts x }
@current.each |x| puts x end
@average
@current
continue
@current.first.name
@current.first
@current
next
@logged_student.exams.untaken.where("valid_from <= ? and valid_to >= ?",now,now)
continue
@logged_student.exams.taken
@exams
next
continue
@average / (@taken_subjects.blank? ? @taken_subjects.size : 1)
@taken_subjects.blank?
@taken_subjects.nil?
@taken_subjects
@average / (@taken_subjects.nil? ? @taken_subjects.size : 1)
@average / (@taken_subjects ? @taken_subjects.size : 1)
@average / @taken_subjects ? @taken_subjects.size : 1
0/1
0/false
@taken_subjects.size
@taken_subjects.size || 1
@taken_subjects.size()
@taken_subjects.size
@taken_subjects
continue
@exam
@exam.last
@exam.results
continue
@exam.results
@exam.result
@exam
continue
e
next
exam_params
@students.count
@students
next
grades
subjects
next
params["subject"]
grades
next
continue
e
continue
e
next
@exam
exam_params
subjects
grades
@students
continue
next
subjects
grades
continue
@exam
result
results
result
continue
@exam
continue
@select_sub
next
@select_grade
next
continue
@exam.errors.messages
@exam.errors.add(:base,e.message)
@exam.errors.add(e.message)
e.message
@exam.errors.add(:base, e.messages)
@exam.errors.full_message('asdf')
@exam.errors.full_message
@exam.errors.add("afd")
@exam.errors.add
@exam.errors.values
@exam.errors.methods
@exam.errors
@exam.errors.messages.methods
@exam.errors.messages
@exam.errors.message
@exam.errors
@exam.errors<<e
@exam.errors<<e.message
@exam.errors<<e.messages
@exam.errors.add(e.message)
@exam.errors.push(e.message)
e.message
e.messages
e.mssages
e
@exam.errors
@exam.errors.add("asdf")
@exam.errors.add
@exam.errors.add(e)
@exam.errors.messages
@exam.errors.full_messages
@exam.errors.methods
@exam.errors
@exam.errors.messages.push(e.messages)
@exam.errors.messages.push(e.message)
@exam.errors.messages
@exam.errors
e.message
e.messages
e
continue
@exams[0]
@exams[0].subjects
@exams[0]
@exams
next
continue
@logged_student.exams.taken
@logged_student.exams.laken
@logged_student.exams
@loggd_student.exams
continue
next
@taken_subjects
next
@exams.ids
@exams
next
exit
@logged_student.contests.where("exam_id in (?)", @logged_student.exams.taken.ids)
@logged_student.contests
@logged_student.contests.pluck(:mark)
@logged_student.contests.pluck(:mark).compact!
@logged_student.contests.pluck(:mark)
@logged_student.contests
@logged_student.exams
@logged_student.exams.contests
@logged_student.exams.contest
@logged_student.exams
@logged_student.contests
@logged_student.exams
continue
exit
current_subjects.pluck(:mark).compact!
current_subjects.pluck(:mark).compact
current_subjects.pluck(:mark)
current_subjects
next
exam
next
exit
current_exam
current_exam.subjects
student.results.where("subject_id in (?)", current_exam.subjects.ids)
 student.contests.find_by_exam_id(params[:id])
student.contests.find_by_exam_id(2)
student.contests.find_by_exam_id("2")
student.contests
params[:id]
student.contests
current_subjects
continue
Contest.pluck(:mark)
@logged_student.exams.taken
@logged_student.exams
@logged_student.exams.taken
@logged_student.exams
@exams
continue
u.exams.joins(:subjects)
u.exams.joins(:subjects).first
u.exams.joins(:subjects)
u.exams
u.subjects.first.exams
u.subjects.first.exam
u.subjects.first
u.subjects
u=Student.find(61)
u
exam
Result
Contest
ea.subjects
ea.subjects.first.results
ea.subjects.first.results.pluck(:mark)
ea.subjects.first.results
ea.subjects.first
ea.subjects
ea = Exam.last
ea.subjects
ea = Exam.first
Exam.first.subjects
Exam.first
exam.firs
@logged_student.exams.untaken
@logged_student.exams.untaken.first
@logged_student.exams.untaken
@logged_student.exams
current_user
current_user.exams
continue
next
@mark
exit
next
params[:subject_id]
params
exit
params
continue
params
next
@answer
@answoer
next
student
next
student
continue
next
params
exit
student.subjects
student.subjects.find_by_id(params[:subject_id])
student.subjects.find_by_id(params[:subject_id]
student.subjects
continue
Result.where("student_id=?",61)
Result.where("student_id:61")
Result.all
student.subjects
student
params
exit
student.exams.includes(:subjects).count
student.exams.includes(:subjects)
student.exams
student.subjects
student
student.subjects
