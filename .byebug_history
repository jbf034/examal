exit
ActiveRecord::Base.methods
ActiveRecord::Base
ActiveRecord::base
ActiveRecord.methods
ActiveRecord.mthods
ActiveRecord
Models
Model
ExamsSubject
Exam_Subjects
Exam_Subject
exit
rxit
Contest
Student
ExamSubject.all
ExamSubject
ExamSubjects
ExamSubject
ExamsSubject
ExamSubject
ExamSubjects
ExamSubject
@current.first
@current.first.exam
@current
exit
ExamsQuestions
ExamsQuestion
ExamsQuestions
ExamSubject
SubjectExam
Contest.first
Contest
Conest
@current
@current.first
@current.first.exam
@current.first
@current.first.exam
@current.first.exams
@current.first
@current
continue
 Subject.joins(:exams).where("exams.id in (?)", exams.ids).select("*, exams.name as exam")
 Subject.joins(:exams).where("exams.id in (?)", exams.ids).select("*, exams.name as exam").first.exam
 Subject.joins(:exams).where("exams.id in (?)", exams.ids).select("*, exams.name").first.name
 Subject.joins(:exams).where("exams.id in (?)", exams.ids).select("*, exams.name").name
 Subject.joins(:exams).where("exams.id in (?)", exams.ids).select("*, exams.name")
 Subject.joins(:exams).where("exams.id in (?)", exams.ids).select("*, exams.name as exam").exam
 Subject.joins(:exams).where("exams.id in (?)", exams.ids).select("*, exams.name as exam").name
 Subject.joins(:exams).where("exams.id in (?)", exams.ids).select("*, exams.name as exam")
 Subject.joins(:exams).where("exams.id in (?)", exams.ids).select("*, exams.name").first.name
 Subject.joins(:exams).where("exams.id in (?)", exams.ids).select("*, exams.name").first
 Subject.joins(:exams).where("exams.id in (?)", exams.ids).select("*, exams.name")
@current
continue
@current.first.name
@current.first
@current
continue
Exam.first
@current.first
@current[0]
@current
~@current
continue
Subject.joins(:exams).where("exams.id in (?)", u.ids)
u.ids
Subject.joins(:exams).where("exams.id in (?)", u.ids)
u
u.untaken
u.taken
u.methods
u
Subject.joins(:u)
Subject.joins(u)
u=@logged_student.exams
Subject.joins(:exams)
Subject.joins(:current)
Subject.incldue(:current)
Subject.incldues(:current)
Subject.joins(:current)
current
Subject.joins(:exams)
current
Subject.joins(:current)
current
continue
 current=@logged_student.exams.untaken.where("valid_from <= ? and valid_to >= ?",now,now)
current
continue
@logged_student.exams.where("contests.mark is null")
@logged_student.exams.where("contests.mark is not null")
@logged_student.exams.where("mark is not null")
@logged_student.exams.where
@logged_student.exams
@logged_student
@logged_student.include(:exams)
@logged_student.includes(:exams)
@logged_student.join(:exams)
@logged_student.joins(:exams)
Contest.exams.where("mark is not null")
Contest.exams.where("exams.mark is not null")
Contest.exam.where("exams.mark is not null")
Contest
@logged_student.exams
@logged_student
current_user
continue
@logged_student.exams
@logged_student.exams.taken
@logged_student.exams
@logged_student.exams.taken
@logged_student.exams
@logged_student
continue
cotninue
Subject.joins(:exams).where("exams.valid_from <= ? and exams.valid_to >= ?",now,now)
Exam.first
Subject.joins(:exams).where("exams.mark is NUL and exams.valid_from <= ? and exams.valid_to >= ?",now,now)
Subject.joins(:exams).where("exams.mark is NULL and exams.valid_from <= ? and exams.valid_to >= ?",now,now)
Subject.joins(:exams).where("exams.mark is nil and exams.valid_from <= ? and exams.valid_to >= ?",now,now)
Subject.joins(:exams).where("exams.mark is null and exams.valid_from <= ? and exams.valid_to >= ?",now,now)
Subject.joins(:exams).where("exams.valid_from <= ? and exams.valid_to >= ?",now,now)
Subject.joins(:exams)
Subject.joins(:current)
Subject.joins(:current).first
Subject.joins(:current)
current
currnet
continue
Subject.joins(:exams).where(con
Subject.joins(:exams)
Subject.joins(@current)
@current.joins(:subjects).select("subjects.id, subjects.title")
@current.joins(:subjects).pluck("subjects.id, subjects.title")
@current.joins(:subjects).pluck("subjects.title")
@current.joins(:subjects).select("subjects.title")[0]
@current.joins(:subjects).select("subjects.title")
@current.joins(:subjects).select("subjects")
@current.joins(:subjects).select("subjects.name")
@current.joins(:subjects).select("subjects.title")
@current.joins(:subjects).select("subject.title")
@current.joins(:subjects).select("subjects.title")
@current.joins(:subjects)
@current.includes(:subjects).all
@current.includes(:subjects)
Subject.include(@current)
@current[0].subjects
@current.subjects
@current.includes(:subjects).select("subjects.title")
@current.includes(:subjects).select("subjects.title").first
@current.includes(:subjects).select("subjects.title")
Subject.join(@current)
@current.includes(:subjects)
@current.includes(:subject)
@current
@current.includes(:subjects)
Subject.last
Subject
Subjects
@current.includes(:subjects)
@current.includes(:subject)
@current.include(:subject)
@current.include(:subjects)
@current
@current.join(:subjects)
@current
next
continue
@current.empty?
next
continue
next
@current
next
@logged_student.exams.where("valid_from <= ? and valid_to >= ?",Time.now,Time.now)
@logged_student.exams.where("valid_from <= ? and valid_to >= ?",now,now)
=@logged_student.exams.where("valid_from <= ? and valid_to >= ?",now,now)
now
Time.now
now
next
continue
Time.now
now
@logged_student.exams.where("valid_from <= ? and valid_to >= ?",now,now)
@current
next
@logged_student.exams.where("valid_from <= ? and valid_to >= ?", Time.now+8*3600, Time.now+8*3600)
@logged_student.exams
@logged_student.contests
@logged_student.exams = @logged_student.contests
@logged_student.exams = @logged_student.contest
@logged_student.exams
@logged_student
continue
current_user
@logged_student
next
subjects
continue
subjects
next
continue
contests << student.id
contests << student
self
contests << student
contests << methods
contests << 
contests.methods
contests
contests<<student
contests<<student.id
contests.delete_all
contests
contest
student=Student.last
continue
next
student
contests << student.id
contests << 1
contests.methods
contests
continue
next
id
next
students
continue
cexit
Student.first.exams
Student.first.exam
Student.first
Contest
self
self.
self.methods
self
slef
Exam.first.questions.reload
Exam.first.questions
Exam.first.question
Exam.first.questions
Exam.first
Question.first
Question
questions
questions.first
questions.all
questions
questions << qsts
