continue
Subject.all
 @exam.subjects.where("subject_id in (?)",del_sub).delete_all
 @exam.subjects.where("subject_id in (?)",del_sub)
del_sub
@exam.subjects
continue
del_sub
continue
new_sub
new_ids
new_subjects
new_ids
 Result.where("student_id in (?)", @students.ids).where("subject_id in (?)", del_sub)
next
 Result.where("student_id in (?)", @students.ids).where("subject_id in (?)", del_sub)
next
@exam.subjects
new_ids
new_sub
del_sub
del_ids
contests
next
continue
students.each do 
next
ids
continue
@exam.students
@select_sub
continue
next
contests
students
next
ids
continue
sbs
continue
next
Result
next
continue
next
new_students
next
continue
next
new_students
next
new_sub
next
del_sub
next
new_ids
next
del_ids
next
subjects
next
grades
next
continue
params["subject"]
params
grades
next
continue
next
exit
new_sub
new_students
next
new_sub
next
subjects = subjects.map{|x| x.to_i}
subjects
subjects.map{|x| x.to_i}
subjects
subjects - @exam.subjects.ids
@exam.subjects.ids
subjects
@exam.subjects.ids
@exam.subjects
del_sub
next
new_ids
next
del_ids
@students
next
contests
next
grades
subjects
next
parsed_param
next
params
continue
ExamQuestion
ExamQuestions
ExamQuestion
Contest
params
continue
@current
continue
@current
exit
ActiveRecord::Base.methods
ActiveRecord::Base
ActiveRecord::base
ActiveRecord.methods
ActiveRecord.mthods
ActiveRecord
Models
Model
ExamsSubject
Exam_Subjects
Exam_Subject
exit
rxit
Contest
Student
ExamSubject.all
ExamSubject
ExamSubjects
ExamSubject
ExamsSubject
ExamSubject
ExamSubjects
ExamSubject
@current.first
@current.first.exam
@current
exit
ExamsQuestions
ExamsQuestion
ExamsQuestions
ExamSubject
SubjectExam
Contest.first
Contest
Conest
@current
@current.first
@current.first.exam
@current.first
@current.first.exam
@current.first.exams
@current.first
@current
continue
 Subject.joins(:exams).where("exams.id in (?)", exams.ids).select("*, exams.name as exam")
 Subject.joins(:exams).where("exams.id in (?)", exams.ids).select("*, exams.name as exam").first.exam
 Subject.joins(:exams).where("exams.id in (?)", exams.ids).select("*, exams.name").first.name
 Subject.joins(:exams).where("exams.id in (?)", exams.ids).select("*, exams.name").name
 Subject.joins(:exams).where("exams.id in (?)", exams.ids).select("*, exams.name")
 Subject.joins(:exams).where("exams.id in (?)", exams.ids).select("*, exams.name as exam").exam
 Subject.joins(:exams).where("exams.id in (?)", exams.ids).select("*, exams.name as exam").name
 Subject.joins(:exams).where("exams.id in (?)", exams.ids).select("*, exams.name as exam")
 Subject.joins(:exams).where("exams.id in (?)", exams.ids).select("*, exams.name").first.name
 Subject.joins(:exams).where("exams.id in (?)", exams.ids).select("*, exams.name").first
 Subject.joins(:exams).where("exams.id in (?)", exams.ids).select("*, exams.name")
@current
continue
@current.first.name
@current.first
@current
continue
Exam.first
@current.first
@current[0]
@current
~@current
continue
Subject.joins(:exams).where("exams.id in (?)", u.ids)
u.ids
Subject.joins(:exams).where("exams.id in (?)", u.ids)
u
u.untaken
u.taken
u.methods
u
Subject.joins(:u)
Subject.joins(u)
u=@logged_student.exams
Subject.joins(:exams)
Subject.joins(:current)
Subject.incldue(:current)
Subject.incldues(:current)
Subject.joins(:current)
current
Subject.joins(:exams)
current
Subject.joins(:current)
current
continue
 current=@logged_student.exams.untaken.where("valid_from <= ? and valid_to >= ?",now,now)
current
continue
@logged_student.exams.where("contests.mark is null")
@logged_student.exams.where("contests.mark is not null")
@logged_student.exams.where("mark is not null")
@logged_student.exams.where
@logged_student.exams
@logged_student
@logged_student.include(:exams)
@logged_student.includes(:exams)
@logged_student.join(:exams)
@logged_student.joins(:exams)
Contest.exams.where("mark is not null")
Contest.exams.where("exams.mark is not null")
Contest.exam.where("exams.mark is not null")
Contest
@logged_student.exams
@logged_student
current_user
continue
@logged_student.exams
@logged_student.exams.taken
@logged_student.exams
@logged_student.exams.taken
@logged_student.exams
@logged_student
continue
cotninue
Subject.joins(:exams).where("exams.valid_from <= ? and exams.valid_to >= ?",now,now)
Exam.first
Subject.joins(:exams).where("exams.mark is NUL and exams.valid_from <= ? and exams.valid_to >= ?",now,now)
Subject.joins(:exams).where("exams.mark is NULL and exams.valid_from <= ? and exams.valid_to >= ?",now,now)
Subject.joins(:exams).where("exams.mark is nil and exams.valid_from <= ? and exams.valid_to >= ?",now,now)
Subject.joins(:exams).where("exams.mark is null and exams.valid_from <= ? and exams.valid_to >= ?",now,now)
Subject.joins(:exams).where("exams.valid_from <= ? and exams.valid_to >= ?",now,now)
Subject.joins(:exams)
Subject.joins(:current)
Subject.joins(:current).first
Subject.joins(:current)
current
currnet
continue
Subject.joins(:exams).where(con
Subject.joins(:exams)
Subject.joins(@current)
@current.joins(:subjects).select("subjects.id, subjects.title")
@current.joins(:subjects).pluck("subjects.id, subjects.title")
@current.joins(:subjects).pluck("subjects.title")
@current.joins(:subjects).select("subjects.title")[0]
@current.joins(:subjects).select("subjects.title")
@current.joins(:subjects).select("subjects")
@current.joins(:subjects).select("subjects.name")
@current.joins(:subjects).select("subjects.title")
@current.joins(:subjects).select("subject.title")
@current.joins(:subjects).select("subjects.title")
